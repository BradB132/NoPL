/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /Users/Brad/Documents/Code/git/NoPL/ANTLR_source/NoPL.g
 *     -                            On : 2012-06-27 23:51:32
 *     -                 for the lexer : NoPLLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
NoPLLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pNoPLLexer, which is returned from a call to NoPLLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pNoPLLexer are  as follows:
 *
 *  - 
 void
      pNoPLLexer->ADD(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->ADD_ASSIGN(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->SUBTRACT(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->SUBTRACT_ASSIGN(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->DIVIDE(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->DIVIDE_ASSIGN(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->MULTIPLY(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->MULTIPLY_ASSIGN(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->EXPONENT(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->EXPONENT_ASSIGN(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->MOD(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->MOD_ASSIGN(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->INCREMENT(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->DECREMENT(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->LOGICAL_EQUALITY(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->LOGICAL_INEQUALITY(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->LOGICAL_AND(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->LOGICAL_OR(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->LOGICAL_NEGATION(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->LESS_THAN(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->LESS_THAN_EQUAL(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->GREATER_THAN(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->GREATER_THAN_EQUAL(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->LITERAL_TRUE(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->LITERAL_FALSE(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->DECL_NUMBER(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->DECL_BOOL(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->DECL_STRING(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->DECL_OBJ(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->LITERAL_NULL(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->OBJECT_TO_MEMBER(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->ARG_DELIMITER(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->SUBSCRIPT_OPEN(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->SUBSCRIPT_CLOSE(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->LOOP_WHILE(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->LOOP_FOR(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->LOOP_DO(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->CONDITIONAL(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->CONDITIONAL_ELSE(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->SWITCH(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->SWITCH_CASE(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->SWITCH_DELIMITER(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->SWITCH_DEFAULT(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->BREAK(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->CONTINUE(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->EXIT(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->PAREN_OPEN(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->PAREN_CLOSE(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->SCOPE_OPEN(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->SCOPE_CLOSE(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->ASSIGN(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->STATEMENT_DELIMITER(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->PRINT_VALUE(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->ID(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->NUMBER(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->COMMENT(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->WS(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->STRING(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->NUMBER_EXPONENT(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->FLOAT_SPECIFIER(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->HEX_DIGIT(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->ESC_SEQ(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->OCTAL_ESC(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->UNICODE_ESC(pNoPLLexer)
 *  - 
 void
      pNoPLLexer->Tokens(pNoPLLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_NoPLLexer_H
#define _NoPLLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct NoPLLexer_Ctx_struct NoPLLexer, * pNoPLLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
NoPLLexer

 */
struct NoPLLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mADD)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mADD_ASSIGN)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mSUBTRACT)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mSUBTRACT_ASSIGN)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mDIVIDE)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mDIVIDE_ASSIGN)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mMULTIPLY)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mMULTIPLY_ASSIGN)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mEXPONENT)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mEXPONENT_ASSIGN)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mMOD)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mMOD_ASSIGN)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mINCREMENT)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mDECREMENT)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mLOGICAL_EQUALITY)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mLOGICAL_INEQUALITY)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mLOGICAL_AND)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mLOGICAL_OR)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mLOGICAL_NEGATION)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mLESS_THAN)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mLESS_THAN_EQUAL)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mGREATER_THAN)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mGREATER_THAN_EQUAL)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mLITERAL_TRUE)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mLITERAL_FALSE)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mDECL_NUMBER)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mDECL_BOOL)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mDECL_STRING)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mDECL_OBJ)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mLITERAL_NULL)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mOBJECT_TO_MEMBER)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mARG_DELIMITER)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mSUBSCRIPT_OPEN)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mSUBSCRIPT_CLOSE)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mLOOP_WHILE)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mLOOP_FOR)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mLOOP_DO)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mCONDITIONAL)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mCONDITIONAL_ELSE)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mSWITCH)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mSWITCH_CASE)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mSWITCH_DELIMITER)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mSWITCH_DEFAULT)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mBREAK)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mCONTINUE)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mEXIT)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mPAREN_OPEN)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mPAREN_CLOSE)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mSCOPE_OPEN)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mSCOPE_CLOSE)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mASSIGN)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mSTATEMENT_DELIMITER)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mPRINT_VALUE)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mID)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mNUMBER)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mNUMBER_EXPONENT)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mFLOAT_SPECIFIER)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mESC_SEQ)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mOCTAL_ESC)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mUNICODE_ESC)	(struct NoPLLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct NoPLLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct NoPLLexer_Ctx_struct * ctx);
    void	    (*free)   (struct NoPLLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pNoPLLexer NoPLLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pNoPLLexer NoPLLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ADD      4
#define ADD_ASSIGN      5
#define ARGUMENTS      6
#define ARG_DELIMITER      7
#define ASSIGN      8
#define BREAK      9
#define COMMENT      10
#define CONDITIONAL      11
#define CONDITIONAL_ELSE      12
#define CONTINUE      13
#define DECL_BOOL      14
#define DECL_NUMBER      15
#define DECL_OBJ      16
#define DECL_STRING      17
#define DECREMENT      18
#define DIVIDE      19
#define DIVIDE_ASSIGN      20
#define ESC_SEQ      21
#define EXIT      22
#define EXPONENT      23
#define EXPONENT_ASSIGN      24
#define FLOAT_SPECIFIER      25
#define FUNCTION_CALL      26
#define GREATER_THAN      27
#define GREATER_THAN_EQUAL      28
#define HEX_DIGIT      29
#define ID      30
#define INCREMENT      31
#define LESS_THAN      32
#define LESS_THAN_EQUAL      33
#define LITERAL_FALSE      34
#define LITERAL_NULL      35
#define LITERAL_TRUE      36
#define LOGICAL_AND      37
#define LOGICAL_EQUALITY      38
#define LOGICAL_INEQUALITY      39
#define LOGICAL_NEGATION      40
#define LOGICAL_OR      41
#define LOOP_DO      42
#define LOOP_FOR      43
#define LOOP_WHILE      44
#define MOD      45
#define MOD_ASSIGN      46
#define MULTIPLY      47
#define MULTIPLY_ASSIGN      48
#define NUMBER      49
#define NUMBER_EXPONENT      50
#define NUMERIC_NEGATION      51
#define OBJECT_TO_MEMBER      52
#define OCTAL_ESC      53
#define PAREN_CLOSE      54
#define PAREN_OPEN      55
#define PRINT_VALUE      56
#define SCOPE_CLOSE      57
#define SCOPE_OPEN      58
#define STATEMENT_DELIMITER      59
#define STRING      60
#define SUBSCRIPT_CLOSE      61
#define SUBSCRIPT_OPEN      62
#define SUBTRACT      63
#define SUBTRACT_ASSIGN      64
#define SWITCH      65
#define SWITCH_CASE      66
#define SWITCH_DEFAULT      67
#define SWITCH_DELIMITER      68
#define TYPE_CAST      69
#define UNICODE_ESC      70
#define WS      71
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for NoPLLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
